#!/bin/sh
###########################################################################
# Copyright (C) 2011 Swedish Meteorological and Hydrological Institute, SMHI,
#
# This file is part of node-installer.
#
# node-installer is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# node-installer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with node-installer.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
#
# Performs the installation steps for installing a working BALTRAD node.
#
# @author Anders Henja (Swedish Meteorological and Hydrological Institute, SMHI)
# @date 2011-09-27
###########################################################################
SCRIPTPATH=$(dirname $(readlink -f $0))
PACKAGEPATH=$SCRIPTPATH/packages

PREFIX=/opt/baltrad
EXPERIMENTAL=
ZLIBARG=
URLREPO=http://git.baltrad.eu/blt_dependencies

ZLIB_VERSION=1.2.4
PYTHON_VERSION=2.6.4
PIP_VERSION=1.0.2
DISTRIBUTE_VERSION=0.6.9

ZLIBINC=
ZLIBLIB=
BUILDZLIB=yes
PIP_TIMEOUT=30
OFFLINE=
CMD=
PRINT_INFO_WANTED=no

fetch_sources() {
  file=$1
  src=$2
  dst=$3

  if [ ! -f "$dst/$file" ]; then
    if [ -n "$OFFLINE" ]; then
      echo "OFFLINE specified, but $file not available in $dst"
      exit 127
    else 
      echo "fetching $2 from $src"
      cd $dst
      wget -c $src/$file > /dev/null
    fi
  fi
}

bootstrap_zlib() {
  prefix=$1
  arch=`uname -m`
  zlib_src=zlib-$2.tar.gz
  
  echo "bootstrapping zlib to $prefix"
  
  fetch_sources $zlib_src $URLREPO $PACKAGEPATH

  cd $PACKAGEPATH
  
  tar -xvpzf $zlib_src > /dev/null  || exit 127
  cd zlib-$2 || exit 127
  
  cmd="./configure --prefix=$prefix"
  if [ "$arch" = "x86_64" ]; then
    cmd="$cmd --64"
  fi
  $cmd > /dev/null || exit 127
  make > /dev/null  || exit 127
  make install > /dev/null  || exit 127
}

clean_zlib() {
  cd $PACKAGEPATH || exit 127
  rm -rf zlib-$1
}

bootstrap_python() {
  prefix=$1
  python_version=$2
  python_src=Python-$python_version.tgz

  echo "bootstrapping python $python_version to $prefix"

  fetch_sources $python_src $URLREPO $PACKAGEPATH
  cd $PACKAGEPATH || exit 127
  echo "Unpacking $python_src"
  tar -xvpzf $python_src > /dev/null || exit 127
  
  cd Python-$python_version || exit 127
  
  echo "configuring Python $python_version"

  if [ "$ZLIBINC" != "" ]; then
    CFLAGS=-I\"$ZLIBINC\"
  fi
  if [ "$ZLIBLIB" != "" ]; then
    LDFLAGS=-L\"$ZLIBLIB\"
  fi
  
  ./configure --prefix=$prefix --enable-shared

  echo "making Python $python_version"
  make
  echo "installing Python $python_version"
  make install > /dev/null || exit 127
}

clean_python() {
  cd $PACKAGEPATH || exit 127
  rm -rf Python-$1
}

install_distribute() {
  python=$1
  distribute_src=distribute-$2.tar.gz

  fetch_sources $distribute_src $URLREPO $PACKAGEPATH

  cd $PACKAGEPATH || exit 127
  tar -xvpzf $distribute_src
  cd `basename $distribute_src .tar.gz` || exit 127

  $python setup.py install || exit 127
}

clean_distribute() {
  cd $PACKAGEPATH || exit 127
  rm -rf distribute-$1
}

usage_brief() {
  echo "Usage: setup <options> command, use --help for information"
}

##
# The documentation exists in the python class install.py as well. If you change documentation
# change it in the python script. The run something like
# cd bin && python -c "import install;install.usage(False)" to get a new help test
#
usage() {
cat << _EOF_

NODE INSTALLER
Usage: setup <options> command, use --help for information

This is the main installation script for installing a BALTRAD node.
Most of the installation is handled without any interaction. However
if you don't want to specify --tomcatpwd on command line you will
promted for one. 

The script will remember several configuration parameters between
runs but some of them will not be stored, like passwords and
similar items. If you want to use the previous parameters, then
you can specify --recall-last-args

Command:
Valid commands are:
 - install
     Installs the software
     
 - check
     Checks that the provided dependencies are correct

 - clean
     Cleans up everything

 - fetch
     Fetch all packages so that it is possible to run an installation
     in 'offline' mode. It will atempt to clean up any unessecary 
     content but it is suggested to execute clean prior fetch.
 
 - dist
     Create distribution tarball
     
Options:
--help
    Shows this text

--recall-last-args
    If you want to use the previous arguments, then you can use
    this option. It will try to restore the configuration parameters
    used in the last run. 

--nodename=<name>
    This attribute should really be specified but there is a default value which
    is the hostname as shown by the command 'hostname'. The node name is a 
    unique identifier that is used for identifying you within the exchange
    network. The node name should usually explain exactly who you are. A good
    example is to use the Java package naming. For example se.myorg or 
    se.myorg.test or similar. This node name will also defining what this 
    installations key will be named.

--prefix=<prefix>
    Points out where the system should be installed. 
    [Default /opt/baltrad]
    
--tprefix=<prefix>
    Points out where the third-party software should be installed.
    [Default <prefix>/third_party]
    
--jdkhome=<jdkhome>
    Points out the jdkhome directory. If omitted, the installer will
    try to find a valid jdk.

--keystore=<path>
    Point out the keystore directory to use when configuring setting up the
    different modules for certification. If not specified, one will be
    created for you in <prefix>/etc/bltnode-keystore.

--with-zlib=yes|no|<zlibroot>|<zlibinc>,<zliblib>
    Specifies if zlib should be built by the installer or not. 
    [Default yes]
    - 'yes' means that the installer should install the provided zlib
    - 'no' means that the installer should atempt to locate a valid
      zlib installation
    - zlibroot specifies a zlib installation where includes can be 
      found in <zlibroot>/include and libraries can be found in 
      <zlibroot>/lib
    - <zlibinc>,<zliblib> can be used to point out the specific 
      include and library paths

--with-psql=<psqlroot>|<psqlinc>,<psqllib>
    Specifies where to locate the postgresql include and library files.
    If omitted the install script assumes that they can be found in 
    the standard locations.
    - psqlroot specifies a postgres installation where includes can be 
      found in <psqlroot>/include and libraries can be found in <psqlroot>/lib
    - <psqlinc>,<psqllib> can be used to point out the specific 
      include and library paths

--with-freetype=<freetypeinc>,<freetypelib>
    In order to get freetype support built in the Python Imaging Library (PIL,
    for use with Google maps plugin). You might have to specify this
    library. <freetypeinc> is the path to the freetype include directory
    as shown when executing freetype-config --cflags excluding the -I of course.
    <freetypelib> is the path where libfreetype.so can be found.

--dbuser=<user>
    Specifies the database user to use. 
    [Default baltrad]

--dbpwd=<pwd>
    Specifies the database user password to use. 
    [Default baltrad]
    
--dbname=<name>
    Specified the database name to use. 
    [Default baltrad]

--dbhost=<host>
    Specified the database host to use. 
    [Default 127.0.0.1]

--with-hdfjava=<hdf java root>
    Specifies the HDF Java root installation directory. 
    If omitted, the installer will install it's own version of hdf-java.
    
--reinstalldb
    Reinstalls the database tables. Use with care.

--excludedb
    Ignores installation of the database tables. Might be since they
    already has been installed. This will cause the DBINSTALL package
    to be set as installed.
    
--runas=<user>
    Specifies the runas user for Tomcat and other processes. It is not 
    allowed to use a runas user that is root due to security issues. 
    [Defaults to user that is installing]

--datadir=<dir>
    The directory where all the data storage files should be placed for 
    BALTRAD-db.
    [Default <prefix>/bdb_storage]

--urlrepo=<url>
    The URL from where the dependency packages can be fetched.
    [Default http://git.baltrad.eu/blt_dependencies]
    
--gitrepo=<url>
    The URL from which the BALTRAD node Git packages can be fetched.
    For example --gitrepo=http://git.baltrad.eu
    [Default git://git.baltrad.eu]

--with-rave
    Install the RAVE PGF

--rave-pgf-port=<port>
    Set the port RAVE should run on.
    [default: 8085]

--rave-log-port=<port>
    Set the port the RAVE logger should run on.
    [default: 8089]

--with-bufr
    Install OPERA BUFR software. This will affect RAVE such that readling of
    polar data in BUFR will be supported.

--rave-center-id=<id>
    WMO originating center ID to be used by RAVE as the source of its products.
    Reference: WMO No. 306.
    [default: 82]

--rave-dex-spoe=<spoe>
    DEX's single point of entry to be used by RAVE. 
    [default: localhost:8080]
    
--with-rave-gmap
    Install the RAVE Google map plugin. Will also cause RAVE PGF to be 
    installed.

--with-bropo
    Install bRopo anomaly detectors. Will also cause RAVE to be installed.

--with-beamb
    Install beam blockage detector package. Will also cause RAVE to be 
    installed.

--with-bwrwp
    Installs the BALTRAD weather radar wind profile generator. Will also cause 
    RAVE to be installed. This is a very special product generator that 
    requires a Fortran compiler to built its dependencies, e.g. gfortran.
    This product requires that the following options also are specified: 
    --with-blas=, --with-cblas=, --with-lapack= and --with-lapacke=. 
    See below on how to use these options.
 
--with-blas=<libblas.a directory>
    Specifies the directory where the libblas.a library resides. Currently only 
    used when installing bwrwp.
    NOTE that the library objects must have been compiled with -fPIC or similar 
    for shared object capabilities since it will be linked into a shared 
    library.

--with-cblas=<root> or <cblas.h incdir>,<libcblas.a dir>
    Specifies where the cblas.h include directory and the libcblas.a directory 
    resides. You can also specify CBLAS root directory that should contain the 
    include and lib directory. Currently only used when installing bwrwp.
    NOTE that the library objects must have been compiled with -fPIC or similar 
    for shared object capabilities since it will be linked into a shared 
    library.

--with-lapack=<liblapack.a directory>
    Specifies the directory where the liblapack.a library resides. Currently 
    only used when installing bwrwp. NOTE that the library objects must have 
    been compiled with -fPIC or similar for shared object capabilities since it 
    will be linked into a shared library.

--with-lapacke=<lapacke.h incdir>,<liblapacke.a dir>
    Specifies where the cblas.h include directory and the libcblas.a directory 
    resides. Currently only used when installing bwrwp.
    NOTE that the library objects must have been compiled with -fPIC or similar 
    for shared object capabilities since it will be linked into a shared 
    library.

--bdb-port=8090
    BDB server port

--bdb-uri=<uri>
    The BDB URI, as default this has no use even when specified. It will only 
    be used if subsystems have been specified so that you can specify a 
    different BDB server. Also, if this is specified, bdb-port will not have 
    any meaning.
    E.g. --bdb-uri=http://somehost:8090
    [Default: Not used]

--bdb-pool-max-size=<N>
    Set the pool size for BDB connections to <N>
    [default: 10]

--bdb-auth=<authtype>
    BDB authentication model. Valid values are:
      * 'noauth' - perform no authentication
      * 'keyczar' - authenticate using Keyczar, reusing host keys
    [default: keyczar]

--bdb-storage=<storagetype>
    BDB storage model. Valid values are:
      * db - store files in the database with a cache in $DATADIR
      * fs - store files in $DATADIR
    [default: db]

--rebuild=<module1>,<module2>,...
    Will force a rebuild and installation of the specified modules. To get a 
    list of available modules and their versions. See option --print-modules.
    E.g. --rebuild=TOMCAT,RAVE
    
--print-modules
    Prints all available modules and their respective version.
    
--print-config
    Prints the build configuration
    
--exclude-tomcat
    Will exclude installation of Tomcat. This is not a recommended procedure 
    but it is here for the possibility to use your own Tomcat installation if 
    necessary.

--tomcatport=<port>
    Specifies the port on which the Tomcat installation should listen.
    Don't use together with --tomcaturl. 
    [Default 8080]

--keystoredn=<dn>
    The distinguished name used in the keystore cert for the secure 
    communication. If <dn> is yes, then a number of questions will be asked 
    during the creation of the keystore. If <dn> is no, then a predefined DN 
    will be created with the format
      "CN=Unknown,OU=Unknown,O=Unknown,L=Unknown,ST=Unknown,C=Unknown"
    Or you can specify your own DN, just keep the above format. Note, that you 
    cannot specify a DN with any spaces in it. If you have that format you will 
    have to use 'yes' instead to get the questions.
    [Default yes]
    
--keystorepwd=<pwd>
    Specifies the password that should be used for the key. If this has not been
    defined, the tomcatpwd will be used.

--tomcatsecureport=<port>
    Specifies the port on which the Tomcat installation should listen on for 
    secure messages.
    [Default 8443]

--tomcaturl=<url>
    Specifies the URL where the Tomcat installation resides. Don't use together 
    with --tomcatport. 
    [Default http://localhost:8080]
    
--tomcatpwd=<pwd>
    Specifies the password that should be used for the manager in the tomcat
    installation.

--tomcatfwdports=<httpport>,<httpsport>
    Specifies that port forwarding has to be supported by the node and hence a secondary mapping
    is added to the dex applicationContext. This attribute is typically used when having the tomcat
    server behind a firewall and proxying calls through a webserver like apache.
    
--force
    Unused at the moment
    
--experimental
    When running into problems with building, like missing libraries, link 
    problems or other miscellaneous problems, this might be the option to 
    specify to get through the build. Some modules are currently being 
    evaluated for stability in a production environment, and by specifying this 
    option, these modules will be built instead.
    
--subsystems=(STANDALONE_RAVE, RAVE ,BDB ,DEX)
    If you are interested in running a standalone installation of RAVE, BDB or 
    DEX, it is possible to do so by specifying which subsystems that should be 
    installed. Since RAVE depends on the BALTRAD-DB Python client API, you are 
    able to specify a specific RAVE module called STANDALONE_RAVE which installs
    RAVE without any BDB-dependencies.    
_EOF_

}

install_pip() {
  python=$1
  pip_src=pip-$2.tar.gz
  fetch_sources $pip_src $URLREPO $PACKAGEPATH

  cd $PACKAGEPATH || exit 127
  tar -xvpzf $pip_src
  cd `basename $pip_src .tar.gz` || exit 127

  $PYTHON_EXECUTABLE setup.py install || exit 127
}

clean_pip() {
  cd $PACKAGEPATH || exit 127
  rm -rf pip-$1
}

for arg in $*; do
  case $arg in
    --prefix=*)
      PREFIX=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --tprefix=*)
      TPREFIX=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --experimental)
      EXPERIMENTAL=yes
      ;;
    --recall-last-args) ;;
    --nodename=*) ;;
    --jdkhome=*) ;;
    --keystore==*) ;;
    --with-psql=*) ;;
    --with-freetype=*) ;;
    --dbuser=*) ;;
    --dbpwd=*) ;;
    --dbname=*) ;;
    --dbhost=*) ;;
    --with-hdfjava=*) ;;
    --reinstalldb) ;;
    --excludedb) ;;
    --runas=*) ;;
    --warfile=*) ;;
    --datadir=*) ;;
    --gitrepo=*) ;;
    --with-rave) ;;
    --rave-pgf-port=*) ;;
    --rave-log-port=*) ;;
    --with-bufr) ;;
    --rave-center-id=*) ;;
    --rave-dex-spoe=*) ;;
    --with-rave-gmap) ;;
    --with-bropo) ;;
    --with-beamb) ;;
    --with-bwrwp) ;;
    --bdb-port=*) ;;
    --bdb-uri=*) ;;
    --bdb-pool-max-size=*) ;;
    --bdb-auth=*) ;;
    --bdb-storage=*) ;;
    --rebuild=*) ;;
    --subsystems=*) ;;
    --with-blas=*) ;;
    --with-cblas=*) ;;
    --with-lapack=*) ;;
    --with-lapacke=*) ;;
    --print-modules)
      PRINT_INFO_WANTED=yes
      ;;
    --print-config)
      PRINT_INFO_WANTED=yes
      ;;
    --exclude-tomcat) ;;
    --tomcatsecureport=*) ;;
    --keystoredn=*) ;;
    --keystorepwd=*) ;;
    --tomcatport=*) ;;
    --tomcaturl=*) ;;
    --tomcatpwd=*) ;;
    --tomcatfwdports=*) ;;
    --force) ;;
    --experimental) ;;
    --urlrepo=*)
      URLREPO=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --with-zlib=*)
      ZLIBARG=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --pip-timeout=*)
      PIP_TIMEOUT=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --offline)
      OFFLINE=yes
      ;;
    install)
      CMD=install
      ;;
    check)
      CMD=check
      ;;
    fetch)
      CMD=fetch
      ;;
    clean)
      CMD=clean
      ;;
    dist)
      CMD=dist
      ;;
    --help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option or command: $arg"
      usage_brief
      exit 127
      ;;
  esac
done

# Check for ~/.pydistutils.cfg. If it exists, we should not continue since it will
# cause a lot of mischief in the installation process
if [ "$CMD" = "install" -a -f ~/.pydistutils.cfg ]; then
  echo "~/.pydistutils.cfg might conflict with the installation. Please remove it before continuing..."
  exit 255
fi

# set default TPREFIX
if [ -z $TPREFIX ]; then
  TPREFIX=$PREFIX/third_party
fi

if [ -n $EXPERIMENTAL ]; then
  PYTHON_VERSION=2.7.2
fi

if [ -n "$ZLIBARG" ]; then
  # We have some options here.
  #  no|false   => don't build zlib, hope it works
  #  yes|true   => build zlib
  #  <path>     => root library, i.e.   <path>/include and <path>/lib
  #  <incpath>,<libpath>
  
  # Contains , ?
  V=`echo $ZLIBARG | grep ","`
  if [ -n "$V" ]; then
    ZLIBINC=`echo "$ZLIBARG" | awk '{split($0, a, ","); print a[1];}'`
    ZLIBLIB=`echo "$ZLIBARG" | awk '{split($0, a, ","); print a[2];}'`
    BUILDZLIB=no
  else
    YN=`echo $ZLIBARG | awk '{print tolower($0)}'`
    if [ "$YN" = "no" -o "$YN" = "false" ]; then
      BUILDZLIB=no
    elif [ "$YN" = "yes" -o "$YN" = "true" ]; then
      BUILDZLIB=yes
    else
      ZLIBINC="$ZLIBARG/include"
      ZLIBLIB="$ZLIBARG/lib"
      BUILDZLIB=no
    fi
  fi
fi

PYTHON_EXECUTABLE=$TPREFIX/bin/python

if [ "$PRINT_INFO_WANTED" = "yes" ]; then
  if [ ! -f "$PYTHON_EXECUTABLE" ]; then
    if [ -f "$PACKAGEPATH/.arguments.dat" ]; then
      echo "Can not print information. No python interpreeter found but arguments exists. Have you altered --prefix !?"
      exit 1
    else
      echo "Can not print information. No python interpreeter found. Try installing the system first or type --help"
      exit 1
    fi
  fi
fi

if [ "$BUILDZLIB" = "yes" ]; then
  ZLIBINC=$TPREFIX/include
  ZLIBLIB=$TPREFIX/lib
  if [ -f "$ZLIBINC/zlib.h" -a -f "$ZLIBLIB/libz.so" ]; then
    echo "ZLIB already installed"
  else
    bootstrap_zlib $TPREFIX $ZLIB_VERSION
  fi
fi

if [ -f $PYTHON_EXECUTABLE ]; then
  echo "PYTHON already installed at $TPREFIX/bin/python"
else
  bootstrap_python $TPREFIX $PYTHON_VERSION
fi

# these are exported to propagate to node-installer's pipinstaller
export PIP_USE_MIRRORS=true 
export PIP_DEFAULT_TIMEOUT=$PIP_TIMEOUT

# make sure python's shared libraries are on linker path
export LD_LIBRARY_PATH=$TPREFIX/lib
if [ "$ZLIBLIB" != "" ]; then
  export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$ZLIBLIB"
fi
EASYINSTALL_EXECUTABLE=$TPREFIX/bin/easy_install
if [ ! -f $EASYINSTALL_EXECUTABLE ]; then
  install_distribute $PYTHON_EXECUTABLE $DISTRIBUTE_VERSION
fi

PIP_EXECUTABLE=$TPREFIX/bin/pip
if [ ! -f $PIP_EXECUTABLE ]; then
  install_pip $PYTHON_EXECUTABLE $PIP_VERSION
fi

if [ "$CMD" = "clean" -o "$CMD" = "dist" ]; then
  echo "CLEANING ZLIB"
  clean_zlib $ZLIB_VERSION
  clean_python $PYTHON_VERSION
  clean_distribute $DISTRIBUTE_VERSION
  clean_pip $PIP_VERSION
fi

# pass the torch to the python node-installer
cd "$SCRIPTPATH/packages"
$PYTHON_EXECUTABLE $SCRIPTPATH/bin/install.py $*
