#!/bin/sh
###########################################################################
# Copyright (C) 2011 Swedish Meteorological and Hydrological Institute, SMHI,
#
# This file is part of node-installer.
#
# node-installer is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# node-installer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with node-installer.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
#
# Performs the installation steps for installing a working baltrad node.
#
# @author Anders Henja (Swedish Meteorological and Hydrological Institute, SMHI)
# @date 2011-09-27
###########################################################################
SCRIPTPATH=$(dirname $(readlink -f $0))
PACKAGEPATH=$SCRIPTPATH/packages

PREFIX=/opt/baltrad
EXPERIMENTAL=
ZLIBARG=
URLREPO=http://git.baltrad.eu/blt_dependencies

ZLIB_VERSION=1.2.4
PYTHON_VERSION=2.6.4
PIP_VERSION=1.0.2
DISTRIBUTE_VERSION=0.6.9

ZLIBINC=
ZLIBLIB=
BUILDZLIB=yes
PIP_TIMEOUT=30
OFFLINE=
CMD=
PRINT_INFO_WANTED=no

fetch_sources() {
  file=$1
  src=$2
  dst=$3

  if [ ! -f "$dst/$file" ]; then
    if [ -n "$OFFLINE" ]; then
      echo "OFFLINE specified, but $file not available in $dst"
      exit 127
    else 
      echo "fetching $2 from $src"
      cd $dst
      wget -c $src/$file > /dev/null
    fi
  fi
}

bootstrap_zlib() {
  prefix=$1
  arch=`uname -m`
  zlib_src=zlib-$2.tar.gz
  
  echo "bootstrapping zlib to $prefix"
  
  fetch_sources $zlib_src $URLREPO $PACKAGEPATH

  cd $PACKAGEPATH
  
  tar -xvpzf $zlib_src > /dev/null  || exit 127
  cd zlib-$2 || exit 127
  
  cmd="./configure --prefix=$prefix"
  if [ "$arch" = "x86_64" ]; then
    cmd="$cmd --64"
  fi
  $cmd > /dev/null || exit 127
  make > /dev/null  || exit 127
  make install > /dev/null  || exit 127
}

clean_zlib() {
  cd $PACKAGEPATH || exit 127
  rm -rf zlib-$1
}

bootstrap_python() {
  prefix=$1
  python_version=$2
  python_src=Python-$python_version.tgz

  echo "bootstrapping python $python_version to $prefix"

  fetch_sources $python_src $URLREPO $PACKAGEPATH
  cd $PACKAGEPATH || exit 127
  echo "Unpacking $python_src"
  tar -xvpzf $python_src > /dev/null || exit 127
  
  cd Python-$python_version || exit 127
  
  echo "configuring Python $python_version"

  if [ "$ZLIBINC" != "" ]; then
    CFLAGS=-I\"$ZLIBINC\"
  fi
  if [ "$ZLIBLIB" != "" ]; then
    LDFLAGS=-L\"$ZLIBLIB\"
  fi
  
  ./configure --prefix=$prefix --enable-shared

  echo "making Python $python_version"
  make
  echo "installing Python $python_version"
  make install > /dev/null || exit 127
}

clean_python() {
  cd $PACKAGEPATH || exit 127
  rm -rf Python-$1
}

install_distribute() {
  python=$1
  distribute_src=distribute-$2.tar.gz

  fetch_sources $distribute_src $URLREPO $PACKAGEPATH

  cd $PACKAGEPATH || exit 127
  tar -xvpzf $distribute_src
  cd `basename $distribute_src .tar.gz` || exit 127

  $python setup.py install || exit 127
}

clean_distribute() {
  cd $PACKAGEPATH || exit 127
  rm -rf distribute-$1
}

usage_brief() {
  echo "Usage: setup <options> command, use --help for information"
}

##
# The documentation exists in the python class install.py as well. If you change documentation
# change it in the python script. The run something like
# cd bin && python -c "import install;install.usage(False)" to get a new help test
#
usage() {
cat << _EOF_

NODE INSTALLER
Usage: setup <options> command, use --help for information

This is the main installation script for installing a baltrad node.
Most of the installation is handled without any interaction. However
if you don't want to specify --tomcatpwd on command line you will
get a question about it. 

The script will remember several configuration parameters between
runs but some of them will not be stored, like passwords and
similar items. If you want to use the previous parameters, then
you can specify --recall-last-args

Command:
Valid commands are:
 - install
     Installs the software
     
 - check
     Checks that the provided dependencies are correct

 - clean
     Cleans up everything

 - fetch
     Fetch all packages so that it is possible to run an installation
     in 'offline' mode. It will atempt to clean up any unessecary 
     content but it is suggested to execute clean prior fetch.
 
 - dist
     Create distribution tarball
     
Options:
--help
    Shows this text

--recall-last-args
    If you want to use the previous arguments, then you can use
    this option. It will try to restore the configuration parameters
    used in the last run. 

--nodename
    This attribute should really be specified but there is a default value which
    is the hostname as shown by the command 'hostname'.

--prefix=<prefix>
    Points out where the system should be installed. 
    [Default /opt/baltrad]
    
--tprefix=<prefix>
    Points out where the third-party software should be installed.
    [Default <prefix>/third_party]
    
--jdkhome=<jdkhome>
    Points out the jdkhome directory. If omitted, the installer will
    try to find a valid jdk.

--keystore=<path>
    Point out the keystore directory to use when configuring setting up the
    different modules for certification. If not specified, one will be
    created for you in <prefix>/etc/bltnode-keystore.

--with-zlib=yes|no|<zlibroot>|<zlibinc>,<zliblib>
    Specifies if zlib should be built by the installer or not. 
    [Default yes]
    - 'yes' means that the installer should install the provided zlib
    - 'no' means that the installer should atempt to locate a valid
      zlib installation
    - zlibroot specifies a zlib installation where includes can be 
      found in <zlibroot>/include and libraries can be found in 
      <zlibroot>/lib
    - <zlibinc>,<zliblib> can be used to point out the specific 
      include and library paths

--with-psql=<psqlroot>|<psqlinc>,<psqllib>
    Specifies where to locate the postgresql include and library files.
    If omitted the install script assumes that they can be found in 
    the standard locations.
    - psqlroot specifies a postgres installation where includes can be 
      found in <psqlroot>/include and libraries can be found in <psqlroot>/lib
    - <psqlinc>,<psqllib> can be used to point out the specific 
      include and library paths

--with-freetype=<freetypeinc>,<freetypelib>
    In order to get freetype support built in the PIL imaging library
    (for use with google maps plugin). You might have to specify this
    library. <freetypeinc> is the path to the freetype include directory
    as shown when executing freetype-config --cflags excluding the -I of course.
    <freetypelib> is the path where libfreetype.so can be found.

--dbuser=<user>
    Specifies the database user to use. 
    [Default baltrad]

--dbpwd=<pwd>
    Specifies the database user password to use. 
    [Default baltrad]
    
--dbname=<name>
    Specified the database name to use. 
    [Default baltrad]

--dbhost=<host>
    Specified the database host to use. 
    [Default 127.0.0.1]

--with-hdfjava=<hdf java root>
    Specifies the hdf java root installation directory. 
    If omitted, the installer will install it's own version of hdf-java.
    
--reinstalldb
    Reinstalls the database tables. Use with care.

--excludedb
    Ignores installation of the database tables. Might be since they
    already has been installed. This will cause the DBINSTALL package
    to be set as installed.
    
--runas=<user>
    Specifies the runas user for tomcat and other processes. It is not 
    allowed to use a runas user that is root due to security-issues. 
    [Defaults to user that is installing]

--datadir=<dir>
    The directory where all the data storage files should be placed for baltrad-db.
    [Default <prefix>/bdb_storage]

--urlrepo=<url>
    The url from where the url packages can be fetched.
    [Default http://git.baltrad.eu/blt_dependencies]
    
--gitrepo=<url>
    The url from where the baltrad node git packages can be fetched.
    For example --gitrepo=http://git.baltrad.eu
    [Default git://git.baltrad.eu]

--with-rave
    Install the rave pgf

--rave-pgf-port=<port>
    Set the port rave should run on.
    [default: 8085]

--with-bufr
    Install the bufr software. This will also affect rave so that if
    we have specified bufr support rave will be built with bufr support
    enabled as well.

--rave-center-id=<id>
    Originating center id to be used by rave as the source of its products.
    [default: 82]

--rave-dex-spoe=<spoe>
    Dex's single point of entry to be used by rave. 
    [default: localhost:8080]
    
--with-rave-gmap
    Install the rave google map plugin. Will also cause rave pgf to be installed.

--with-bropo
    Install the anomaly detector bropo. Will also cause rave to be installed.

--with-beamb
    Install the beam blockage detector beamb. Will also cause rave to be installed.

--with-bdbfs
    Will build and install the baltrad db file system driver

--bdb-port=8090
    BDB server port

--bdb-pool-max-size=<N>
    Set the pool size for bdb connections to <N>
    [default: 10]

--bdb-auth=<authtype>
    BDB authentication model. Valid values are:
      * 'noauth' - perform no authentication
      * 'keyczar' - authenticate using Keyczar, reusing host keys
    [default: keyczar]

--bdb-storage=<storagetype>
    BDB storage model. Valid values are:
      * db - store files in the database with a cache in $DATADIR
      * fs - store files in $DATADIR
    [default: db]

--rebuild=<module1>,<module2>,...
    Will force a rebuild and installation of the specified modules. To get a 
    list of available modules and their versions. See option --print-modules.
    E.g. --rebuild=TOMCAT,RAVE
    
--print-modules
    Prints all available modules and their respective version.
    
--print-config
    Prints the build configuration
    
--exclude-tomcat
    Will exclude installation of tomcat. This is not a recommended procedure but 
    it is here for the possibility to use your own tomcat installation if it 
    is necessary.

--tomcatport=<port>
    Specifies the port on which the tomcat installation should listen on.
    Don't use together with --tomcaturl. 
    [Default 8080]

--tomcaturl=<url>
    Specifies the tomcat url where the tomcat installation resides. Don't
    use together with --tomcatport. 
    [Default http://localhost:8080]
    
--tomcatpwd=<pwd>
    Specifies the password that should be used for the manager in the tomcat
    installation.
    
--force
    Unused at the moment
    
--experimental
    When running into problems with building, like missing libraries, link problems
    or other miscellaneous problems. This might be the option to specify. Some modules
    are currently beeing evaluated if they are stable enough to be used in production
    and by specifying this option these modules will be built instead.
    
_EOF_
  
}

install_pip() {
  python=$1
  pip_src=pip-$2.tar.gz
  fetch_sources $pip_src $URLREPO $PACKAGEPATH

  cd $PACKAGEPATH || exit 127
  tar -xvpzf $pip_src
  cd `basename $pip_src .tar.gz` || exit 127

  $PYTHON_EXECUTABLE setup.py install || exit 127
}

clean_pip() {
  cd $PACKAGEPATH || exit 127
  rm -rf pip-$1
}

# pick the args that are interesting for bootstrapping
for arg in $*; do
  case $arg in
    --prefix=*)
      PREFIX=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --tprefix=*)
      TPREFIX=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --experimental)
      EXPERIMENTAL=yes
      ;;
    --recall-last-args) ;;
    --nodename=*) ;;
    --jdkhome=*) ;;
    --keystore==*) ;;
    --with-psql=*) ;;
    --with-freetype=*) ;;
    --dbuser=*) ;;
    --dbpwd=*) ;;
    --dbname=*) ;;
    --dbhost=*) ;;
    --with-hdfjava=*) ;;
    --reinstalldb) ;;
    --excludedb) ;;
    --runas=*) ;;
    --warfile=*) ;;
    --datadir=*) ;;
    --gitrepo=*) ;;
    --with-rave) ;;
    --rave-pgf-port=*) ;;
    --with-bufr) ;;
    --rave-center-id=*) ;;
    --rave-dex-spoe=*) ;;
    --with-rave-gmap) ;;
    --with-bropo) ;;
    --with-beamb) ;;
    --with-bdbfs) ;;
    --bdb-port=*) ;;
    --bdb-pool-max-size=*) ;;
    --bdb-auth=*) ;;
    --bdb-storage=*) ;;
    --rebuild=*) ;;
    --print-modules)
      PRINT_INFO_WANTED=yes
      ;;
    --print-config)
      PRINT_INFO_WANTED=yes
      ;;
    --exclude-tomcat) ;;
    --tomcatport=*) ;;
    --tomcaturl=*) ;;
    --tomcatpwd=*) ;;
    --force) ;;
    --experimental) ;;
    --urlrepo=*)
      URLREPO=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --with-zlib=*)
      ZLIBARG=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --pip-timeout=*)
      PIP_TIMEOUT=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --offline)
      OFFLINE=yes
      ;;
    install)
      CMD=install
      ;;
    check)
      CMD=check
      ;;
    fetch)
      CMD=fetch
      ;;
    clean)
      CMD=clean
      ;;
    dist)
      CMD=dist
      ;;
    --help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option or command: $arg"
      usage_brief
      exit 127
      ;;
  esac
done

# set default TPREFIX
if [ -z $TPREFIX ]; then
  TPREFIX=$PREFIX/third_party
fi

if [ -n $EXPERIMENTAL ]; then
  PYTHON_VERSION=2.7.2
fi

if [ -n "$ZLIBARG" ]; then
  # We have some options here.
  #  no|false   => don't build zlib, hope it works
  #  yes|true   => build zlib
  #  <path>     => root library, i.e.   <path>/include and <path>/lib
  #  <incpath>,<libpath>
  
  # Contains , ?
  V=`echo $ZLIBARG | grep ","`
  if [ -n "$V" ]; then
    ZLIBINC=`echo "$ZLIBARG" | awk '{split($0, a, ","); print a[1];}'`
    ZLIBLIB=`echo "$ZLIBARG" | awk '{split($0, a, ","); print a[2];}'`
    BUILDZLIB=no
  else
    YN=`echo $ZLIBARG | awk '{print tolower($0)}'`
    if [ "$YN" = "no" -o "$YN" = "false" ]; then
      BUILDZLIB=no
    elif [ "$YN" = "yes" -o "$YN" = "true" ]; then
      BUILDZLIB=yes
    else
      ZLIBINC="$ZLIBARG/include"
      ZLIBLIB="$ZLIBARG/lib"
      BUILDZLIB=no
    fi
  fi
fi

PYTHON_EXECUTABLE=$TPREFIX/bin/python

if [ "$PRINT_INFO_WANTED" = "yes" ]; then
  if [ ! -f "$PYTHON_EXECUTABLE" ]; then
    if [ -f "$PACKAGEPATH/.arguments.dat" ]; then
      echo "Can not print information. No python interpreeter found but arguments exists. Have you altered --prefix !?"
      exit 1
    else
      echo "Can not print information. No python interpreeter found. Try installing the system first or type --help"
      exit 1
    fi
  fi
fi

if [ "$BUILDZLIB" = "yes" ]; then
  ZLIBINC=$TPREFIX/include
  ZLIBLIB=$TPREFIX/lib
  if [ -f "$ZLIBINC/zlib.h" -a -f "$ZLIBLIB/libz.so" ]; then
    echo "ZLIB already installed"
  else
    bootstrap_zlib $TPREFIX $ZLIB_VERSION
  fi
fi

if [ -f $PYTHON_EXECUTABLE ]; then
  echo "PYTHON already installed at $TPREFIX/bin/python"
else
  bootstrap_python $TPREFIX $PYTHON_VERSION
fi

# these are exported to propagate to node-installer's pipinstaller
export PIP_USE_MIRRORS=true 
export PIP_DEFAULT_TIMEOUT=$PIP_TIMEOUT

# make sure python's shared libraries are on linker path
export LD_LIBRARY_PATH=$TPREFIX/lib
if [ "$ZLIBLIB" != "" ]; then
  export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$ZLIBLIB"
fi
EASYINSTALL_EXECUTABLE=$TPREFIX/bin/easy_install
if [ ! -f $EASYINSTALL_EXECUTABLE ]; then
  install_distribute $PYTHON_EXECUTABLE $DISTRIBUTE_VERSION
fi

PIP_EXECUTABLE=$TPREFIX/bin/pip
if [ ! -f $PIP_EXECUTABLE ]; then
  install_pip $PYTHON_EXECUTABLE $PIP_VERSION
fi

if [ "$CMD" = "clean" -o "$CMD" = "dist" ]; then
  echo "CLEANING ZLIB"
  clean_zlib $ZLIB_VERSION
  clean_python $PYTHON_VERSION
  clean_distribute $DISTRIBUTE_VERSION
  clean_pip $PIP_VERSION
fi

# pass the torch to the python node-installer
cd "$SCRIPTPATH/packages"
$PYTHON_EXECUTABLE $SCRIPTPATH/bin/install.py $*
