#!/bin/sh
###########################################################################
# Copyright (C) 2011 Swedish Meteorological and Hydrological Institute, SMHI,
#
# This file is part of node-installer.
#
# node-installer is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# node-installer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with node-installer.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
#
# Performs the installation steps for installing a working baltrad node.
#
# @author Anders Henja (Swedish Meteorological and Hydrological Institute, SMHI)
# @date 2011-09-27
###########################################################################
SCRIPTPATH=$(dirname $(readlink -f $0))
PACKAGEPATH=$SCRIPTPATH/packages

PREFIX=/opt/baltrad
EXPERIMENTAL=
ZLIBARG=
URLREPO=http://git.baltrad.eu/blt_dependencies

ZLIB_VERSION=1.2.4
PYTHON_VERSION=2.6.4
PIP_VERSION=1.0.2
DISTRIBUTE_VERSION=0.6.9

ZLIBINC=
ZLIBLIB=
BUILDZLIB=yes
PIP_TIMEOUT=30
OFFLINE=
CMD=

fetch_sources() {
  file=$1
  src=$2
  dst=$3

  if [ ! -f "$dst/$file" ]; then
    if [ -n "$OFFLINE" ]; then
      echo "OFFLINE specified, but $file not available in $dst"
      exit 127
    else 
      echo "fetching $2 from $src"
      cd $dst
      wget -c $src/$file > /dev/null
    fi
  fi
}

bootstrap_zlib() {
  prefix=$1
  arch=`uname -m`
  zlib_src=zlib-$2.tar.gz
  
  echo "bootstrapping zlib to $prefix"
  
  fetch_sources $zlib_src $URLREPO $PACKAGEPATH

  cd $PACKAGEPATH
  
  tar -xvpzf $zlib_src > /dev/null  || exit 127
  cd zlib-$2 || exit 127
  
  cmd="./configure --prefix=$prefix"
  if [ "$arch" = "x86_64" ]; then
    cmd="$cmd --64"
  fi
  $cmd > /dev/null || exit 127
  make > /dev/null  || exit 127
  make install > /dev/null  || exit 127
}

clean_zlib() {
  cd $PACKAGEPATH || exit 127
  rm -rf zlib-$1
}

bootstrap_python() {
  prefix=$1
  python_version=$2
  python_src=Python-$python_version.tgz

  echo "bootstrapping python $python_version to $prefix"

  fetch_sources $python_src $URLREPO $PACKAGEPATH
  cd $PACKAGEPATH || exit 127
  echo "Unpacking $python_src"
  tar -xvpzf $python_src > /dev/null || exit 127
  
  cd Python-$python_version || exit 127
  
  echo "configuring Python $python_version"

  if [ "$ZLIBINC" != "" ]; then
    CFLAGS=-I\"$ZLIBINC\"
  fi
  if [ "$ZLIBLIB" != "" ]; then
    LDFLAGS=-L\"$ZLIBLIB\"
  fi
  
  ./configure --prefix=$prefix --enable-shared

  echo "making Python $python_version"
  make
  echo "installing Python $python_version"
  make install > /dev/null || exit 127
}

clean_python() {
  cd $PACKAGEPATH || exit 127
  rm -rf Python-$1
}

install_distribute() {
  python=$1
  distribute_src=distribute-$2.tar.gz

  fetch_sources $distribute_src $URLREPO $PACKAGEPATH

  cd $PACKAGEPATH || exit 127
  tar -xvpzf $distribute_src
  cd `basename $distribute_src .tar.gz` || exit 127

  $python setup.py install || exit 127
}

clean_distribute() {
  cd $PACKAGEPATH || exit 127
  rm -rf distribute-$1
}

install_pip() {
  python=$1
  pip_src=pip-$2.tar.gz
  fetch_sources $pip_src $URLREPO $PACKAGEPATH

  cd $PACKAGEPATH || exit 127
  tar -xvpzf $pip_src
  cd `basename $pip_src .tar.gz` || exit 127

  $PYTHON_EXECUTABLE setup.py install || exit 127
}

clean_pip() {
  cd $PACKAGEPATH || exit 127
  rm -rf pip-$1
}

# pick the args that are interesting for bootstrapping
for arg in $*; do
  case $arg in
    --prefix=*)
      PREFIX=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --tprefix=*)
      TPREFIX=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --experimental)
      EXPERIMENTAL=yes
      ;;
    --urlrepo=*)
      URLREPO=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --with-zlib=*)
      ZLIBARG=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --pip-timeout=*)
      PIP_TIMEOUT=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --offline)
      OFFLINE=yes
      ;;
      
    install)
      CMD=install
      ;;
    check)
      CMD=check
      ;;
    fetch)
      CMD=fetch
      ;;
    clean)
      CMD=clean
      ;;
    dist)
      CMD=dist
      ;;
  esac
done

# set default TPREFIX
if [ -z $TPREFIX ]; then
  TPREFIX=$PREFIX/third_party
fi

if [ -n $EXPERIMENTAL ]; then
  PYTHON_VERSION=2.7.2
fi

if [ -n "$ZLIBARG" ]; then
  # We have some options here.
  #  no|false   => don't build zlib, hope it works
  #  yes|true   => build zlib
  #  <path>     => root library, i.e.   <path>/include and <path>/lib
  #  <incpath>,<libpath>
  
  # Contains , ?
  V=`echo $ZLIBARG | grep ","`
  if [ -n "$V" ]; then
    ZLIBINC=`echo "$ZLIBARG" | awk '{split($0, a, ","); print a[1];}'`
    ZLIBLIB=`echo "$ZLIBARG" | awk '{split($0, a, ","); print a[2];}'`
    BUILDZLIB=no
  else
    YN=`echo $ZLIBARG | awk '{print tolower($0)}'`
    if [ "$YN" = "no" -o "$YN" = "false" ]; then
      BUILDZLIB=no
    elif [ "$YN" = "yes" -o "$YN" = "true" ]; then
      BUILDZLIB=yes
    else
      ZLIBINC="$ZLIBARG/include"
      ZLIBLIB="$ZLIBARG/lib"
      BUILDZLIB=no
    fi
  fi
fi

if [ "$BUILDZLIB" = "yes" ]; then
  ZLIBINC=$TPREFIX/include
  ZLIBLIB=$TPREFIX/lib
  if [ -f "$ZLIBINC/zlib.h" -a -f "$ZLIBLIB/libz.so" ]; then
    echo "ZLIB already installed"
  else
    bootstrap_zlib $TPREFIX $ZLIB_VERSION
  fi
fi

PYTHON_EXECUTABLE=$TPREFIX/bin/python
if [ -f $PYTHON_EXECUTABLE ]; then
  echo "PYTHON already installed at $TPREFIX/bin/python"
else
  bootstrap_python $TPREFIX $PYTHON_VERSION
fi

# these are exported to propagate to node-installer's pipinstaller
export PIP_USE_MIRRORS=true 
export PIP_DEFAULT_TIMEOUT=$PIP_TIMEOUT

# make sure python's shared libraries are on linker path
export LD_LIBRARY_PATH=$TPREFIX/lib
if [ "$ZLIBLIB" != "" ]; then
  export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$ZLIBLIB"
fi
EASYINSTALL_EXECUTABLE=$TPREFIX/bin/easy_install
if [ ! -f $EASYINSTALL_EXECUTABLE ]; then
  install_distribute $PYTHON_EXECUTABLE $DISTRIBUTE_VERSION
fi

PIP_EXECUTABLE=$TPREFIX/bin/pip
if [ ! -f $PIP_EXECUTABLE ]; then
  install_pip $PYTHON_EXECUTABLE $PIP_VERSION
fi

if [ "$CMD" = "clean" -o "$CMD" = "dist" ]; then
  clean_zlib $ZLIB_VERSION
  clean_python $PYTHON_VERSION
  clean_distribute $DISTRIBUTE_VERSION
  clean_pip $PIP_VERSION
fi

# pass the torch to the python node-installer
cd "$SCRIPTPATH/packages"
$PYTHON_EXECUTABLE $SCRIPTPATH/bin/install.py $*
