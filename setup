#!/bin/sh
###########################################################################
# Copyright (C) 2011 Swedish Meteorological and Hydrological Institute, SMHI,
#
# This file is part of node-installer.
#
# node-installer is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# node-installer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with node-installer.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
#
# Performs the installation steps for installing a working baltrad node.
#
# @author Anders Henja (Swedish Meteorological and Hydrological Institute, SMHI)
# @date 2011-09-27
###########################################################################
SCRIPTPATH=$(dirname $(readlink -f $0))
PACKAGEPATH=$SCRIPTPATH/packages

PREFIX=/opt/baltrad
EXPERIMENTAL=
ZLIBARG=
URLREPO=http://git.baltrad.eu/blt_dependencies

ZLIBINC=
ZLIBLIB=
BUILDZLIB=yes
PIP_TIMEOUT=30

fetch_sources() {
  file=$1
  src=$2
  dst=$3
    
  if [ ! -f $dst/$file ]; then
    echo "fetching $2 from $src"
    cd $dst
    wget -c $src/$file > /dev/null
  fi
}

bootstrap_zlib() {
  prefix=$1
  arch=`uname -m`
  zlib_src=zlib-1.2.4.tar.gz
  
  echo "bootstrapping zlib to $prefix"
  
  fetch_sources $zlib_src $URLREPO $PACKAGEPATH

  cd $PACKAGEPATH
  
  tar -xvpzf $zlib_src > /dev/null  || exit 127
  cd zlib-1.2.4 || exit 127
  
  cmd="./configure --prefix=$prefix"
  if [ "$arch" = "x86_64" ]; then
    cmd="$cmd --64"
  fi
  $cmd > /dev/null || exit 127
  make > /dev/null  || exit 127
  make install > /dev/null  || exit 127
}

bootstrap() {
  prefix=$1
  if [ -z $EXPERIMENTAL ]; then
    python_version=2.6.4
  else
    python_version=2.7.2
  fi
  python_src=Python-$python_version.tgz

  echo "bootstrapping python $python_version to $prefix"

  fetch_sources $python_src $URLREPO $PACKAGEPATH
  cd $PACKAGEPATH || exit 127
  echo "Unpacking $python_src"
  tar -xvpzf $python_src > /dev/null || exit 127
  
  cd Python-$python_version || exit 127
  
  echo "configuring Python $python_version"

  if [ "$ZLIBINC" != "" ]; then
    CFLAGS=-I\"$ZLIBINC\"
  fi
  if [ "$ZLIBLIB" != "" ]; then
    LDFLAGS=-L\"$ZLIBLIB\"
  fi
  
  ./configure --prefix=$prefix --enable-shared

  echo "making Python $python_version"
  make
  echo "installing Python $python_version"
  make install > /dev/null || exit 127
}

# pick the args that are interesting for bootstrapping
for arg in $*; do
  case $arg in
    --prefix=*)
      PREFIX=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --tprefix=*)
      TPREFIX=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --experimental)
      EXPERIMENTAL=yes
      ;;
    --urlrepo=*)
      URLREPO=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --with-zlib=*)
      ZLIBARG=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
    --pip-timeout=*)
      PIP_TIMEOUT=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
      ;;
  esac
done

# set default TPREFIX
if [ -z $TPREFIX ]; then
  TPREFIX=$PREFIX/third_party
fi

if [ -n "$ZLIBARG" ]; then
  # We have some options here.
  #  no|false   => don't build zlib, hope it works
  #  yes|true   => build zlib
  #  <path>     => root library, i.e.   <path>/include and <path>/lib
  #  <incpath>,<libpath>
  
  # Contains , ?
  V=`echo $ZLIBARG | grep ","`
  if [ -n "$V" ]; then
    ZLIBINC=`echo "$ZLIBARG" | awk '{split($0, a, ","); print a[1];}'`
    ZLIBLIB=`echo "$ZLIBARG" | awk '{split($0, a, ","); print a[2];}'`
    BUILDZLIB=no
  else
    YN=`echo $ZLIBARG | awk '{print tolower($0)}'`
    if [ "$YN" = "no" -o "$YN" = "false" ]; then
      BUILDZLIB=no
    elif [ "$YN" = "yes" -o "$YN" = "true" ]; then
      BUILDZLIB=yes
    else
      ZLIBINC="$ZLIBARG/include"
      ZLIBLIB="$ZLIBARG/lib"
      BUILDZLIB=no
    fi
  fi
fi

if [ "$BUILDZLIB" = "yes" ]; then
  ZLIBINC=$TPREFIX/include
  ZLIBLIB=$TPREFIX/lib
  if [ -f "$ZLIBINC/zlib.h" -a -f "$ZLIBLIB/libz.so" ]; then
    echo "ZLIB already installed"
  else
    bootstrap_zlib $TPREFIX
  fi
fi

PYTHON_EXECUTABLE=$TPREFIX/bin/python
if [ -f $PYTHON_EXECUTABLE ]; then
  echo "PYTHON already installed at $TPREFIX/bin/python"
else
  bootstrap $TPREFIX
fi

# these are exported to propagate to node-installer's pipinstaller
export PIP_USE_MIRRORS=true 
export PIP_DEFAULT_TIMEOUT=$PIP_TIMEOUT

# make sure python's shared libraries are on linker path
export LD_LIBRARY_PATH=$TPREFIX/lib
if [ "$ZLIBLIB" != "" ]; then
  export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$ZLIBLIB"
fi
EASYINSTALL_EXECUTABLE=$TPREFIX/bin/easy_install
if [ ! -f $EASYINSTALL_EXECUTABLE ]; then
  echo "installing distribute, this might take a while..."
  $PYTHON_EXECUTABLE $SCRIPTPATH/bin/distribute_setup.py > /dev/null || exit 127
fi

PIP_EXECUTABLE=$TPREFIX/bin/pip
if [ ! -f $PIP_EXECUTABLE ]; then
  echo "installing pip, this might take a while..."
  $PYTHON_EXECUTABLE $SCRIPTPATH/bin/get-pip.py > /dev/null
  # returns 0 on failure, check if the executable appeared to determine success
  if [ ! -f $PIP_EXECUTABLE ]; then
    exit 127
  fi
fi

# pass the torch to the python node-installer
cd "$SCRIPTPATH/packages"
$PYTHON_EXECUTABLE $SCRIPTPATH/bin/install.py $*
