###########################################################################
Copyright (C) 2011 Swedish Meteorological and Hydrological Institute, SMHI,

This file is part of node-installer.

node-installer is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

node-installer is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with node-installer.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
@author Anders Henja (Swedish Meteorological and Hydrological Institute, SMHI)
@date 2011-10-05
###########################################################################

INTRODUCTION
This installer will set up and deploy the BALTRAD node software. The software
has been designed for 64-bit (and possibly 32-bit) Linux distributions.
As a first step, the installation will install a Python interpreter and
maybe also zlib. After that it will continue with the rest of the installation
with the installed interpreter.

Before you start, you will have to ensure that you have a number of
software packages installed that are not allowed or are impractical to be
distributed as part of this package.

=========== NOTICE!!! ===============
Currently the node-installer uses Python 3.6 which reach EOL in December 2021 and is not updated.
On more recent operating systems where gcc >= 9, there will be problems building the system. If you
experience odd problems related to installation of for example Python or odd link problems. You can
probably force the build to use gcc = 8.5 by using a different compiler version. On Ubuntu 21.10 you
can do the following:
%> sudo apt install gcc-8 g++-8
%> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8

If you already have different gcc-versions installed you can change the default version by:
%> update-alternatives --config gcc

=========== PREREQUISITES ===========
*) A postgres database server must be installed (8.3.9 or higher, preferably 
8.4+). It does not need to be installed on the same server as this software,
but it must be accessible.

<optional configuration>
To increase security a little, and reduce the risk of corrupting the wrong
database, edit /var/lib/pgsql/data/pg_hba.conf . At the bottom, the entries
should read:
# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD

# "local" is for Unix domain socket connections only
local   all         all                               md5
# IPv4 local connections:
host    all         all         127.0.0.1/32          md5
# IPv6 local connections:
host    all         all         ::1/128               md5

After this is done, restart the server:
# service postgresql restart
</optional configuration>

If you don't see the security for the database as a major problem you can for example
change the method to read "trust" instead of "md5" for the local connections.

You must create a database and a user in the postgres server before attempting 
to install the software. This is probably done as user 'postgres' but there are 
of course other alternatives as well.

The two postgres commands to use are:
CREATE USER <user> with PASSWORD '<password>';
CREATE DATABASE <dbname> with OWNER <user>;

E.g.
# su - postgres
%> psql
> CREATE USER baltrad with PASSWORD 'baltrad';
> CREATE DATABASE baltrad with OWNER baltrad;

These parameters will be used when building the software, so it is probably a 
good idea to remember user name, password, database name and on what IP-address 
you can reach the database.

You will need the following packages installed before attempting to build
the system:

*) Git client (for fetching the software)

*) An installed Java SDK, currently it must be OpenJDK or SUN JDK (> 1.6)

*) gcc/g++/gcc-c++ (version 4.1 or higher)

*) make (version 3.8 or higher)

*) autoconf (version 2.59 or higher)

*) unicode support (ICU)
   for Red Hat, CentOS, etc.. yum install libicu.x86_64 libicu-devel.x86_64
   for Debian, Ubuntu, etc.. sudo apt-get install libicu-dev

*) bzip2 development libraries
   for Red Hat, CentOS, etc.. yum install bzip2-devel.x86_64
   for Debian, Ubuntu, etc.. sudo apt-get install libbz2-dev

*) Postgres development libraries
   for Red Hat, CentOS, etc.. yum install postgresql-devel.x86_64  (or postgresql84-devel.x86_64)
   for Debian, Ubuntu, etc.. sudo apt-get install postgresql-client-8.4 postgresql-client-common libpq-dev

*) OpenSSL development packages
   for Red Hat, CentOS, etc.. yum install openssl-devel.x86_64 openssl.x86_64
   for Debian, Ubuntu, etc.. sudo apt-get install openssl libssl-dev

*) doxygen
   for Red Hat, CentOS, etc.. yum install doxygen.x86_64
   for Debian, Ubuntu, etc.. sudo apt-get install doxygen

You might also need to install these packages since one or more modules
depends on these.

*) PNG development libraries (used by e.g. bRopo)
   for Red Hat, CentOS, etc... yum install libpng-devel.x86_64
   for Debian, Ubuntu, etc... sudo apt-get install libpng-dev

*) Freetype2 libraries (Used by e.g. google map plugin)
   for Red Hat, CentOS, etc... yum install freetype.x86_64 freetype-devel.x86_64
   for Debian, Ubuntu, etc... sudo apt-get install libfreetype6 libfreetype6-dev

On Ubuntu 11.10 and onwards we have observed that there might be problems related to
hashlib and the encryption algorithms. This can be solved by running: 
   
   sudo apt-get install libssl-dev openssl dpkg-dev


=========== INSTALLATION ===========
Most of the software is built from scratch (both third-party libraries and
the BALTRAD software). During the build all fetched software will be placed
in the directory <node-installer-root>/packages.

It is recommended that you specify --nodename=<name> on installation. This is
essential for identification purposes. Keys are looked up based on this name.
So if you specify an alternative keystore, make sure you have a key for your
node in there. If not provided, the hostname will be used, but it is
recommended that you provide one manually anyway.

The communication between the different nodes make use of public key
cryptography to sign and verify the messages. The node-installer creates
your private key in $PREFIX/etc/bltnode-keys/$NODENAME.priv and the public
one in $PREFIX/etc/bltnode-keys/$NODENAME.pub. Keep your private key secret
and safe!

You can point out an alternative keystore location with --keystore=<path>

If you know that you are behind a proxy, you might have to specify a proxy in
order for pypi to be able to fetch the packages. This can be achieved by
setting the environment variable http_proxy before running setup.
  %> export http_proxy=http://myproxyurl

The installation only requires a call to the setup script. There are quite a few
arguments that can be provided to the script in order to enable/disable features
and also to generate offline installation content etc. Please type
  %> ./setup --help

for a full feature list. This INSTALL document will cover the basic usage so you
are recommended to read the help text.

The specified arguments will be stored so that they can be used in the next run
to give the user an easy way to perform upgrades or rebuild specific modules if
necessary. The installed modules also follow a dependency scheme which means
that if you rebuild one module, all modules dependent on it will be rebuilt too.

As usual when it comes to unices, depending on who you are when running the
setup call, you might have to create the installation directories. For
example, if specifying '--prefix=/opt/blt' as user 'baltrad'. You will have
to create the directory /opt/blt with proper permissions before issuing the
setup call.

Let's get to how an installation can be performed. We want to install the
software in /opt/blt. The Java we are using is located in /opt/jdk1.6.0 and
we want to use the postgresql APIs on a Ubuntu 10.10. We also want RAVE and
bRopo to be installed.

This can be achieved by executing the following command:
  %> ./setup --prefix=/opt/blt --jdkhome=/opt/jdk1.6.0 \
      --with-psql=/usr/include/postgresql,/usr/lib --with-rave-gmap --with-bropo install

Now the software will start fetching the different packages and hopefully build
everything successfully but, as you probably can imagine, there is always
something that will go wrong or you forgot to specify a feature you want to
install.
To see what build settings you have specified, type:
  %> ./setup --print-config
CONFIGURATION PARAMETERS
--prefix=                 /opt/blt                            
--tprefix=                /opt/blt/third_party                
--urlrepo=                http://git.baltrad.eu/blt_dependencies
--dbuser=                 baltrad                            
--dbname=                 baltrad                            
--dbhost=                 127.0.0.1                          
--runas=                  anders                             
--with-hdfjava=           /opt/blt/third_party/hdf-java       
--with-zlib=              no                                 
--with-psql=              /usr/include/postgresql,/usr/lib   
--with-rave-gmap                                             
--with-bropo                                                 
--jdkhome=                /opt/jdk1.6.0 

As you can see from this printout, several options that you haven't
specified will be shown, these are the default values. However, passwords,
exclude options and rebuild options are never stored and must be provided
for each run.

So, for example, if you had a different db password and the build failed
due to that, you will only have to specify the --dbpwd option and rerun like:
  %> ./setup --dbpwd=secret install

To see what you have installed, you can type
  %> ./setup --print-modules
MODULES
ZLIB                 1.2.4                               NOT INSTALLED 
HDF5                 1.8.5-patch1                        INSTALLED     
EXPAT                2.0.1                               INSTALLED     
...

First column is the name of the module, second is the version and third if
it has been installed or not.

TOMCAT AND LOG FILES
The application can produce a lot of debug or informative messages in the log files. These files can in turn become very large so it might be a good idea to add a logrotate rule to keep the
log files in check.

Add a file, /etc/logrotate.d/tomcat or similar and add the following information in the configuration file.

\verbatim
/opt/baltrad/third_party/tomcat/logs/catalina.out {  
  copytruncate  
  daily  
  rotate 7  
  compress  
  missingok  
  size 5M  
}

BALTRAD WEATHER RADAR WIND PROFILES (BWRWP)
The BALTRAD wrwp package is very different from the other modules and product 
generators. It depends on Fortran dependencies (BLAS, CBLAS, LAPACK and LAPACKE)
and therefore requires a Fortran compiler. The software has only been used with 
gfortran but it might work for other variants as well which we currently don't 
support. However, if you find out a way to get it to build with another 
compiler, we would be very happy to integrate your suggestions into the 
software.

Since most of the software we are using is used within the RAVE PGF, that in 
turn uses Python shared objects, the BLAS, CBLAS, LAPACK and LAPACKE libraries 
must be compiled with support for linking into shared libraries. This is done on
gcc by adding the -fPIC compiler flag.

If you experience that the building of bwrwp fails with some message about 
recompiling with -fPIC, or any error messages hinting about objects not being 
built with relocation support, you might have to rebuild BLAS, CBLAS, LAPACK and
LAPACKE. Hopefully, these hints will help you out (re)building those libraries.

Modify BLAS/make.inc: add -fPIC to OPTS and NOOPT
Change the value of BLASLIB to libblas.a
"%> make clean; make"

CBLAS/Makefile.in: add -fPIC to CFLAGS and FFLAGS
Change the values of BLLIB to match that in BLAS/make.inc
Change the value of CBLIB to libcblas.a
"%> make clean; make"

lapack-.../make.inc: add -fPIC to OPTS, NOOPT and CFLAGS
Change the value of BLASLIB to match that in BLAS/make.inc
"%> make clean; make; cd lapacke; make"
